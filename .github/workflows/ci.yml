# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Amazon ECS

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1 # set this to your preferred AWS region, e.g. us-west-1

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install jq
        run: apt-get install -y jq
      - name: Install AWS SDK
        run: npm install aws
      - name: Build ps corefn deps
        run: cd staging && npm install && npx spago build --purs-args "-g corefn" && cd ..
      - name: Build corefn list
        run: python gen_externs_array.py
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t wags-lambda .
          docker tag wags-lambda:latest 201242457561.dkr.ecr.eu-west-1.amazonaws.com/wags-lambda:latest
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 201242457561.dkr.ecr.eu-west-1.amazonaws.com
          docker push 201242457561.dkr.ecr.eu-west-1.amazonaws.com/wags-lambda:latest
      - name: Build ps js deps
        run: cd staging && npm install && npx spago build --purs-args "-g js" && cd ..
      - name: Do build
        run: cd staging && cp -r "$PWD/output" "$PWD/../client/public/js/output" && cd ../client && npm install && npm run build:production
      - name: To netlify
        run: npm install -g netlify && NETLIFY_SITE_ID=${{ secrets.NETLIFY_SITE_ID }} NETLIFY_AUTH_TOKEN=${{ secrets.NETLIFY_AUTH_TOKEN }} netlify deploy --dir=client/public --prod
      - name: Update function code
        id: update-function-code
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: pip install -r requirements.txt && python aws_publish.py
